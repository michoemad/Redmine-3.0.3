c
builder.to_html
buidler.to_html
builder = Nokogiri::HTML::Builder.new do |xml| xml.label { xml.input(name:"m") {xml.text "HI"} } end
builder.to_html
builder = Nokogiri::HTML::Builder.new do |xml| xml.label { xml.input(name:"m") { "HI"} } end
builder = Nokogiri::HTML::Builder.new do |xml| xml.label { xml.input(name:"m") "HI" } end
builder.to_html
builder = Nokogiri::HTML::Builder.new do |xml| xml.label { xml.input "HI" } end
builder = Nokogiri::XML::Builder.new do |xml| xml.label { xml.input(name:"qalb") "HI" } end
builder.to_xml
builder = Nokogiri::XML::Builder.new do |xml| xml.label { xml.input "HI" } end
builder = Nokogiri::XML::Builder.new do |xml| xml.label { xml.input "HI" } } end
builder.to_xml
builder.to_html
builder = Nokogiri::XML::Builder.new do |xml| xml.label { xml.input { xml.name "hi" } } end
builder.to_html
builder = Nokogiri::HTML::Builder.new do |xml| xml.label { xml.input { xml.name "hi" } } end
builder.to_html
builder = Nokogiri::HTML::Builder.new do |xml| xml.label { xml.input {  } } end
builder = Nokogiri::HTML::Builder.new do |xml| xml.label { xml.input { xml.text "HI" } }} end
builder.to_html
builder = Nokogiri::HTML::Builder.new do |xml| xml.label { xml.input { xml.text "HI" } } end
builder = Nokogiri::XML::Builder.new do |xml| xml.label { xml.input { HI } } end
c
builder=Nokogiri::XML::Builder.new do |xml|
   10:     }
    9:       HI
    8:     xml.input {
    7:  xml.label {
builder = Nokogiri::XML::Builder.new do |xml|
c
n= <<EOT
q
Note.all
@note = Note.create(title: file_name, attachment_id: @attachment.id,project_id:@project.id)
Note.last.delete
Note.all
@attachment.id
Note.all
@note = Note.create(title: file_name, attachmend_id: @attachment.id,project_id:@project.id)
Attachment.all
@attachment
k
u=agent.get(URI.join('http://localhost:3000/projects/tyhft/files/new')) 
x=2
agent
print "h"
u=agent.get(URI.join('http://localhost:3000/projects/tyhft/files/new')) 
agent.get(URI.join('http://localhost:3000/projects/tyhft/files/new')) do |upload_page|
puts upload_page.labels
agent.get(URI.join('http://localhost:3000/projects/tyhft/files/new')) do |upload_page|
agent = Mechanize.new
require 'mechanize'
agent
c
project_files_path
fiels_page_path
q
agent.get(URI.join('d'))
agent
URI.join('a')
URI
c
attachments
n
container
c
@containers
n
@containers
n
@containers
n
Project.includes(:attachments).references(:attachments).find(@project.id)
Project.includes(:attachments).references(:attachments).find(@project_ids)
Project.includes(:attachments).references(:attachments).find(@project_id)
Project.includes(:attachments).references(:attachments)
Project.includes(:attachments)
Project.includes
User.table_name
Attachment.table_name
Attachment
params
c
q
a.save
a
a.author = User.current
a.author = rr
a
a.filename = "this"
a.errors
a.save
Attachment.new
a = Attachment.new(:file => tempfile)
tempfile
c
@document
q
@document
@document.safe_attributes=({"title"=>'hi'})
@document
q
@documen
@document.safe_attributes= {:title => "hi"}
@document
@document.safe_attributes= {title: "hi"}
@document
c
@document.save
@document
@document\
@document.title= "hu"
@document.errors
@document.save.errors
@document.save
@document
q
params
c
params
c
q
x['content-disposition'][/filename(.*)/][10..-2]
x['content-disposition'][/filename(.*)/][10..-1]
x['content-disposition'][/filename(.*)/][10,-1]
x['content-disposition'][/filename(.*)/][11]
x['content-disposition'][/filename(.*)/]
x['content-disposition'][/filename(.*)/][10,]
x['content-disposition'][/filename(.*)/][10:]
x['content-disposition'][/filename(.*)/][11]
x['content-disposition'][/filename(.*)/]
x['content-disposition'][/filename/]
x['content-disposition'][0]
/filename.+/.match(x['content-disposition']).to_s
/filename.+/.match(x['content-disposition'])
/filename.+/.match(x['content-disposition']).to_s
/filename.+/.match(x['content-disposition']).methods.to_s
/filename.+/.match(x['content-disposition']).methods
/filename.+/.match(x['content-disposition'])
/filename.+\\/.match(x['content-disposition'])
/filename.+\/.match(x['content-disposition'])
/filename.+/.match(x['content-disposition'])
/.+/.match(x['content-disposition'])
/./.match(x['content-disposition'])
/filename=/\/.match(x['content-disposition'])
/filename=\/.match(x['content-disposition'])
/filename./.match(x['content-disposition'])
/filename=./.match(x['content-disposition'])
/filename=/.match(x['content-disposition'])
/filename/.match(x['content-disposition'])
/"filename"/.match(x['content-disposition'])
x['content-disposition'].match("filename=/")
x['content-disposition'].match("filenames")
x['content-disposition'].match("filename")
x['content-disposition']
x.to_hash['content-disposition']
x.to_hash('content-disposition')
x.get_fields('content-disposition')
x.get_field('content-disposition')
x['content-disposition'].filename
x['content-disposition']
x['content-type']
x['content-type]
x.server
x.content_disposition
x.content
x.content_length
x.content_disposition
x.file_name
x.content_type
x.read_body.attachement
x.read_body
x.message
x.http_version
x.header
x.headers
x.body.to_s.parse
x.body.to_s
x.to_s
x.to_S
x.methods
x
q
x.parse
parse
x
c
x
q
parse
require 'webrick'
require 'stringio'
x.parse(StringIO.new(request))
req.parse(StringIO.new(request))
request
x
c
q
HTTP
}
  "age": 25
  "lastName": "Smith",
  "firstName": "John",
{
Content-Length: 62
Content-Type: application/json
Host: my.hostname.com
POST /url/path HTTP/1.1
Request = <<-HTTP
x.parse(StringIO.new(<<-HTTP))
x.parse(StringIO.new(Request))
x.header[server]
x.header.server
x.header.inspect
x.header.display
x.header.methods
x.header
x.body
x.header
x
q
x.response.header
x.response.methods
x.response
x.attachement
x.class
x.read_header
x.methods
x.body
curl
x.header
x
q
temp
t
temp
var local
var all
var
params
q
step
n
s
step
@document
h
params
c
q
File.open(temp.path,'wb') do |f| f.write x.body end
x.to_s
x
x.force_encoding
